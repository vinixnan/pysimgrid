#!/usr/local/bin/python
import click
from pysimgrid import simdag
import pysimgrid.simdag.algorithms as algorithms
import json

import collections

collections.Mapping = collections.abc.Mapping

collections.Sequence = collections.abc.Sequence

algs=[
 'DLS',
 'HCPT',
 'HEFT',
 'Lookahead',
 'PEFT',
 'RoundRobinStatic',
 'SimHEFT',]


@click.command()
@click.option(
    "--conf", help="Path for a XML File containing the host configuration", required=True
)
@click.option(
    "--problem",
    "-p",
    help="Path for the problem definition (.dot file)",
    required=True,
)
@click.option(
    "--alg", "-a", help="Algorithm in "+str(algs), default=["HEFT"]
)
def run(
    conf,
    problem,
    alg,
):
    returning_dict = {}
    with simdag.Simulation(conf, problem) as simulation:
      classdef = getattr(algorithms, alg)
      scheduler = classdef(simulation)
      scheduler.run()
      returning_dict['makespan'] = simulation.clock
      returning_dict['total_time'] = scheduler.total_time
      returning_dict['tasks'] = format_output(simulation.tasks)
      print(json.dumps(returning_dict))

def format_output(tasks):
    tasks_in_host = {}
    for task in tasks:
        target_host = task.hosts[0].name
        el = {}
        host = tasks_in_host.get(target_host, [])
        el["target_host"] = target_host
        el["name"] = task.name
        el["start_time"] = task.start_time
        el["finish_time"] = task.finish_time
        el["kind"] = task.kind
        host.append(el)
        tasks_in_host[target_host] = host
    return tasks_in_host

if __name__ == "__main__":
    run()






